---
import { Icon } from "astro-icon/components";
import { profileConfig } from "../../config";
import type { AuthorData } from "../../lib/strapi";
import { getIndexSettings, getPrimaryAuthor } from "../../lib/strapi";
import { url } from "../../utils/url-utils";
import { adaptImageUrl } from "../../utils/image-adapter";
import ImageWrapper from "../misc/ImageWrapper.astro";

// 获取 Index Settings 来检查是否显示作者小分区
let showAuthorSection = true; // 默认显示
try {
	const indexSettings = await getIndexSettings();
	if (indexSettings.data) {
		showAuthorSection = indexSettings.data.show_author_section !== false;
	}
} catch (error) {
	console.error("获取 Index Settings 失败，使用默认设置:", error);
}

// 如果设置为不显示作者小分区，直接返回空
if (!showAuthorSection) {
	// 返回空的 HTML，不渲染任何内容
}

// 尝试获取 Strapi 中的主要作者信息，如果失败则使用配置文件
let authorInfo: AuthorData | null = null;
try {
	authorInfo = await getPrimaryAuthor();
} catch (error) {
	console.error("获取作者信息失败，使用配置文件:", error);
}

// 如果没有获取到 Strapi 作者信息，使用配置文件
const config = authorInfo
	? {
			avatar: authorInfo.avatar || profileConfig.avatar, // 优先使用Strapi头像
			name: authorInfo.name || profileConfig.name,
			bio: authorInfo.bio || profileConfig.bio,
			links: [],
		}
	: profileConfig;

// 构建社交链接
const socialLinks = [];

if (authorInfo) {
	// 使用 Strapi 作者的社交链接
	if (authorInfo.email) {
		socialLinks.push({
			name: "Email",
			icon: "material-symbols:mail-outline",
			url: `mailto:${authorInfo.email}`,
		});
	}
	if (authorInfo.website) {
		const w = authorInfo.website;
		const websiteUrl = w.startsWith("http") ? w : `https://${w}`;
		socialLinks.push({
			name: "Website",
			icon: "material-symbols:language",
			url: websiteUrl,
		});
	}
	if (authorInfo.github) {
		const g = authorInfo.github;
		const githubUrl = g.startsWith("http") ? g : `https://github.com/${g}`;
		socialLinks.push({
			name: "GitHub",
			icon: "fa6-brands:github",
			url: githubUrl,
		});
	}
	if (authorInfo.twitter) {
		const t = authorInfo.twitter;
		const twitterUrl = t.startsWith("http") ? t : `https://twitter.com/${t}`;
		socialLinks.push({
			name: "Twitter",
			icon: "fa6-brands:twitter",
			url: twitterUrl,
		});
	}
	if (authorInfo.linkedin) {
		const l = authorInfo.linkedin;
		const linkedinUrl = l.startsWith("http")
			? l
			: `https://linkedin.com/in/${l}`;
		socialLinks.push({
			name: "LinkedIn",
			icon: "fa6-brands:linkedin",
			url: linkedinUrl,
		});
	}
} else {
	// 使用配置文件的链接
	socialLinks.push(...profileConfig.links);
}
---

{showAuthorSection && (
<div class="p-3">
    <a aria-label="Go to About Page" href={url('/about/')}
       class="group block relative mx-auto mt-1 lg:mx-0 lg:mt-0 mb-3
       max-w-[12rem] lg:max-w-none overflow-hidden rounded-xl active:scale-95">
        <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50
        w-full h-full z-50 flex items-center justify-center">
            <Icon name="fa6-regular:address-card"
                  class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl">
            </Icon>
        </div>
        {(() => {
          const a = authorInfo?.avatar as unknown;
          let fromAuthor = '' as string;
          if (typeof a === 'string') {
            fromAuthor = a;
          } else if (Array.isArray(a)) {
            fromAuthor = a[0]?.url ?? '';
          } else if (a && typeof a === 'object' && (a as { url?: string }).url) {
            fromAuthor = (a as { url?: string }).url || '';
          }
          
          const defaultFallback = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256"><defs><linearGradient id="g" x1="0" y1="0" x2="1" y2="1"><stop offset="0%" stop-color="%236366f1"/><stop offset="100%" stop-color="%2394a3ff"/></linearGradient></defs><rect width="256" height="256" rx="24" fill="url(%23g)"/><g fill="white" opacity="0.9"><circle cx="128" cy="100" r="44"/><path d="M40 212c0-42 36-68 88-68s88 26 88 68v12H40z"/></g></svg>';
          const avatarFromConfig = typeof (config as any).avatar === 'string' ? (config as any).avatar as string : '';
          
          // 使用图片适配器处理URL
          const avatarSrc: string = fromAuthor 
            ? adaptImageUrl(fromAuthor, defaultFallback)
            : (avatarFromConfig || defaultFallback);

          if (import.meta.env.DEV) {
            console.log("👤 Strapi作者信息:", authorInfo);
            console.log("🖼️ 最终头像URL:", avatarSrc);
          }
          return (
            <ImageWrapper src={avatarSrc} fallback={defaultFallback} alt="Profile Image of the Author" class="mx-auto lg:w-full h-full lg:mt-0 "></ImageWrapper>
          );
        })()}
    </a>
    <div class="px-2">
        <div class="font-bold text-xl text-center mb-1 dark:text-neutral-50 transition">{authorInfo?.name || config.name}</div>
        <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
        <div class="text-center text-black/60 dark:text-white/60 mb-2.5 transition">{authorInfo?.bio || config.bio}</div>
        <div class="flex gap-2 justify-center mb-1">
            {socialLinks.length > 1 && socialLinks.map(item =>
                    <a rel="me" aria-label={item.name} href={item.url} target="_blank" class="btn-regular rounded-lg h-10 w-10 active:scale-90 grid place-items-center">
                        <Icon name={item.icon} class="text-base md:text-[1.1rem]"></Icon>
                    </a>
            )}
            {socialLinks.length == 1 && <a rel="me" aria-label={socialLinks[0].name} href={socialLinks[0].url} target="_blank"
                                            class="btn-regular rounded-lg h-10 gap-2 px-3 font-bold active:scale-95 inline-flex items-center">
                <Icon name={socialLinks[0].icon} class="text-base md:text-[1.1rem]"></Icon>
                {socialLinks[0].name}
            </a>}
        </div>
    </div>
</div>
)}
